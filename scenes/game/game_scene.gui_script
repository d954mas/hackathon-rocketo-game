local COMMON = require "libs.common"
local ACTIONS = require "libs.actions.actions"
local BaseGuiScript = require "libs_project.scripts.base_gui_script"
local LoginView = require "scenes.game.views.login_view"
local InitializingView = require "scenes.game.views.initializing_view"
local DebugView = require "scenes.game.views.debug_view"
local GameListView = require "scenes.game.views.game_list_view"
local NewGameView = require "scenes.game.views.new_game_view"

---@class GameSceneGuiScript:GuiScriptBase
local Script = COMMON.class("GameSceneGuiScript", BaseGuiScript)

function Script:init()
	BaseGuiScript.init(self, { context_name = COMMON.CONTEXT.NAMES.GAME_GUI })
	self.actions = ACTIONS.Parallel()
	self.actions.drop_empty = false
	self.subscription:add(COMMON.EVENT_BUS:subscribe(COMMON.EVENTS.WINDOW_RESIZED):go_distinct(self.scheduler)
								:subscribe(function()
		self:on_resize()
	end))
	self.subscription:add(COMMON.EVENT_BUS:subscribe(COMMON.EVENTS.NEAR):go_distinct(self.scheduler)
								:subscribe(function(data)
		self:on_near_event(data)
	end))

	self:on_resize()
	self:show_initializing_ui()
	roketo.init_near()
end

function Script:bind_vh()
	self.vh = {
		lbl_account_id = gui.get_node("lbl_account_id")
	}

	self.views = {
		login_view = LoginView("login_view"),
		initializing_view = InitializingView("init_near_view"),
		debug_view = DebugView("debug_view"),
		game_list_view = GameListView("game_list_view"),
		new_game_view = NewGameView("new_game_view")
	}
end

function Script:init_gui()
	BaseGuiScript.init_gui(self)
	gui.set_render_order(COMMON.CONSTANTS.GUI_ORDER.GAME)
end

function Script:on_resize()

end

function Script:on_near_event(data)
	----init near. Show start login UI or start game ui
	if (data.message_id == "NearInitRoketoApiControlSuccess") then
		if (roketo.is_logged_in()) then
			self:show_start_ui()
		else
			self:show_login_ui()
		end
	elseif (data.message_id == "NearLoginSuccess") then
		if (roketo.is_logged_in()) then
			self:show_start_ui()

		end
	end
end

function Script:show_initializing_ui()
	COMMON.i("show_initializing_ui", "GAME_UI")
	for _, view in pairs(self.views) do
		view:set_enabled(false)
	end
	self.views.initializing_view:set_enabled(true)
end

function Script:show_login_ui()
	COMMON.i("show_login_ui", "GAME_UI")
	for _, view in pairs(self.views) do
		view:set_enabled(false)
	end
	self.views.login_view:set_enabled(true)
end

function Script:show_start_ui()
	COMMON.i("show_start_ui", "GAME_UI")
	self.views.initializing_view:set_enabled(false)
	self.views.login_view:set_enabled(false)
	self.views.debug_view:set_enabled(true)
	self.views.game_list_view:set_enabled(true)
	self.views.new_game_view:set_enabled(true)
end

function Script:update(dt)
	BaseGuiScript.update(self, dt)
	gui.set_text(self.vh.lbl_account_id, roketo.get_account_id() or "not logged in")
end

function Script:on_input(action_id, action)
	for _, view in pairs(self.views) do
		view:on_input(action_id, action)
	end
end

function Script:on_storage_changed()

end

function Script:final()
	BaseGuiScript.final(self)
end

COMMON.N28S.register_scripts({ Script() })