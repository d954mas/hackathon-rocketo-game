local COMMON = require "libs.common"
local GUI = require "libs_project.gui.gui"
local SM = require "libs_project.sm"
local SM_ENUMS = require "libs.sm.enums"
local SceneDebugView = require "debug.view.scene_debug_view"
local WORLD = require "world.world"
local DEBUG_INFO = require "debug.debug_info"

local Script = COMMON.new_n28s()

function Script:bind_vh()
    self.vh = {
        node_root = gui.get_node("root"),
        lbl_game_speed = gui.get_node("game_speed/lbl"),
        lbl_cpu = gui.get_node("lbl_cpu"),
        lbl_memory = gui.get_node("lbl_memory"),
    }
    self.views = {
        btn_top_panel_show = GUI.ButtonIconTest("btn_top_panel_show"),
        btn_profiler = GUI.ButtonIconTest("btn_profiler"),

        btn_scene = GUI.ButtonIconTest("btn_scene"),
        btn_time_up = GUI.ButtonIconTest("game_speed/btn_up"),
        btn_time_down = GUI.ButtonIconTest("game_speed/btn_down"),
        scene_debug_view = SceneDebugView("scene_debug_view"),
        panels = {
            game = {
                root = gui.get_node("panel_game"),
                btn_activate = GUI.ButtonIconTest("btn_game"),
                childs = {
                    checkbox_show_ecs = GUI.CheckboxWithLabel("panel_game/checkbox_show_ecs"),
                    lbl_ecs_systems = gui.get_node("panel_game/lbl_ecs_systems"),
                    lbl_info = gui.get_node("panel_game/lbl_info"),
                    btn_gems_add = GUI.ButtonScale("panel_game/btn_gems_add"),
                    btn_exp_add = GUI.ButtonScale("panel_game/btn_exp_add"),
                    btn_food_add = GUI.ButtonScale("panel_game/btn_food_add"),
                },
                config = { show_ecs = false }
            }
        }
    }
end

function Script:init_gui()
    self.views.scene_debug_view:set_enabled(false)
    self.views.btn_top_panel_show:set_input_listener(function()
        self:input_toggle_gui_visible()
    end)
    self.views.btn_profiler:set_input_listener(function()
        self.views.btn_profiler.show_profiler = not self.views.btn_profiler.show_profiler
        profiler.enable_ui(self.views.btn_profiler.show_profiler)
    end)
    self.views.btn_scene:set_input_listener(function()
        self.views.scene_debug_view:set_enabled(not gui.is_enabled(self.views.scene_debug_view.vh.root))
    end)
    self.views.btn_time_up:set_input_listener(function()
        self:speed_game_set(1)
    end)
    self.views.btn_time_down:set_input_listener(function()
        self:speed_game_set(-1)
    end)

    self.views.panels.game.btn_activate:set_input_listener(function()
        self:panel_toggle(self.views.panels.game)
    end)


    self:panel_hide_all()

    local chb_show_ecs = self.views.panels.game.childs.checkbox_show_ecs
    gui.set_enabled(self.views.panels.game.childs.lbl_ecs_systems, self.views.panels.game.config.show_ecs)
    chb_show_ecs:set_checked(self.views.panels.game.config.show_ecs)
    chb_show_ecs:set_input_listener(function()
        self.views.panels.game.config.show_ecs = chb_show_ecs.checked
        gui.set_enabled(self.views.panels.game.childs.lbl_ecs_systems, chb_show_ecs.checked)
    end)

    self.views.panels.game.childs.btn_gems_add:set_input_listener(function()
        WORLD.storage.resource:gems_add(5000)
    end)

    self.views.panels.game.childs.btn_exp_add:set_input_listener(function()
        WORLD.storage.hero:exp_add(25)
    end)

    self.views.panels.game.childs.btn_food_add:set_input_listener(function()
        WORLD.storage.resource:food_add(1)
    end)



    self.views.panels.game.update = function(dt)
        local game = self.views.panels.game
        local config = self.views.panels.game.config
        local config = self.views.panels.game.config

        if (gui.is_enabled(game.root)) then
            gui.set_text(game.childs.lbl_info, string.format(
                    "ecs: %0.2f",
                    DEBUG_INFO.ecs_update_dt_max_second * 1000))

        end

        if config.show_ecs then
            local text = ""
            if (WORLD.game.ecs_game and WORLD.game.ecs_game.ecs) then
                text = text .. string.format("%-30s %-7s %-9s %-6s %-6s %-6s \n", "Name", "Active", "Entities", "T", "TAvg", "TMax")
                local systems = COMMON.LUME.clone_shallow(WORLD.game.ecs_game.ecs.systems)
                table.sort(systems,function(a,b)
                    return a._time.average_value> b._time.average_value
                end)
                for _, sys in ipairs(systems) do
                    local count = 0
                    for _, _ in pairs(sys.entities) do
                        count = count + 1
                    end
                    text = text .. string.format("%-30s %-7s %-9d %-6.2f %-6.2f %-6.2f\n", sys.name or "no_name", tostring(sys.active), count,
                            sys._time.current * 1000, sys._time.average_value * 1000, sys._time.max * 1000)
                end
            end
            gui.set_text(game.childs.lbl_ecs_systems, text)
        end
    end
end

function Script:panel_hide_all()
    for _, panel in pairs(self.views.panels) do
        gui.set_enabled(panel.root, false)
    end
end

function Script:panel_update(dt)
    for _, panel in pairs(self.views.panels) do
        if (gui.is_enabled(panel.root) and panel.update) then
            panel.update(dt)
        end
    end
end

function Script:panel_toggle(panel)
    if (not gui.is_enabled(panel.root)) then
        self:panel_show(panel)
    else
        self:panel_hide_all()
    end
end

function Script:panel_show(panel)
    self:panel_hide_all()
    gui.set_enabled(panel.root, true)
end

function Script:panel_input(action_id, action)
    for _, panel in pairs(self.views.panels) do
        if (panel.btn_activate:on_input(action_id, action)) then return true end
    end

    for _, panel in pairs(self.views.panels) do
        if (gui.is_enabled(panel.root)) then
            for _, child in pairs(panel.childs) do
                if (type(child) == "table" and child.on_input and child:on_input(action_id, action)) then return true end
            end
        end
    end
end

function Script:speed_game_set(value)
    local scale = 0.1 * value
    if (value > 0 and COMMON.GLOBAL.speed_game >= 0.999999999) or (value < 0 and COMMON.GLOBAL.speed_game > 1) then
        scale = 0.25 * value
    end
    COMMON.GLOBAL.speed_game = COMMON.LUME.clamp(COMMON.GLOBAL.speed_game + scale, 0.1, 10)
    self.speed_game_changed = true
end

function Script:init()
    gui.set_render_order(15)
    self:bind_vh()
    self:init_gui()
    self.input = COMMON.INPUT()
    -- self.input.acquire()
    self.input:add(hash("toggle_top_panel_show_btn"), self.input_toggle_gui_visible, true)
    self.show = true
    self:input_toggle_gui_visible()
    timer.delay(3, true, function()
        self.input.acquire()--make debug always on top of input stack
    end)
end

function Script:update(dt)

    if self.show then
        gui.set_text(self.vh.lbl_game_speed, string.format("Speed:%.2f", COMMON.GLOBAL.speed_game))
        gui.set_text(self.vh.lbl_cpu, "Cpu:" .. string.format("%.2f", profiler.get_cpu_usage()))
        gui.set_text(self.vh.lbl_memory, "Mem:" .. string.format("%.2f Mb", profiler.get_memory_usage() / 1024 / 1024))
        self:panel_update(dt)
    end

    if (self.levels_gui_panel) then
        self.levels_gui_panel:update(dt)
    end

    self.views.scene_debug_view:update(dt)

    local scene = SM.stack:peek()
    if scene and (scene ~= self.scene_current or self.speed_game_changed) and scene._state == SM_ENUMS.STATES.RUNNING then
        self.scene_current = scene
        self.speed_game_changed = false
        msg.post(scene._url.path, COMMON.HASHES.MSG.SET_TIME_STEP, { factor = COMMON.GLOBAL.speed_game, mode = 0 })
    end
end

function Script:final()
    self.input.release()
end

function Script:input_toggle_gui_visible()
    self.show = not self.show
    profiler.set_ui_vsync_wait_visible(false)
    gui.set_enabled(self.vh.node_root, self.show)
    return true
end

function Script:on_input(action_id, action)
    if (self.input:on_input(self, action_id, action)) then return true end
    if (self.views.btn_top_panel_show:on_input(action_id, action)) then return true end
    if (self.show) then
        if (self.views.btn_profiler:on_input(action_id, action)) then return true end
        if (self.views.btn_scene:on_input(action_id, action)) then return true end
        if (self.views.btn_time_up:on_input(action_id, action)) then return true end
        if (self.views.btn_time_down:on_input(action_id, action)) then return true end

        if (self:panel_input(action_id, action)) then return true end
    end
end

COMMON.N28S.register(Script())